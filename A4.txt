// fcfs
#include "bits/stdc++.h"
using namespace std;


int main () {
    int n;
    cout << "Enter no of processes" << endl;
    cin >> n;
    int processes[n];
    cout << "Enter burst time of processes" << endl;
    for (int i=0; i<n; i++)
        cin >> processes[i];

    int turnAroundTime = 0;

    for (int i=0; i<n; i++) {
        turnAroundTime += processes[i];
        cout << "Turn around time for process " << i+1 << " is " << turnAroundTime << " seconds\n";
        cout << "Waiting time for process " << i+1 << " is " << turnAroundTime-processes[i] << " seconds\n";
    }
}


// sjf

#include "bits/stdc++.h"
using namespace std;

void sort_burst_time (int** arr, int n) {
    for (int i=0; i<n-1; i++) {
        for (int j=0; j<n-i-1; j++) {
            if (arr[j][1] > arr[j+1][1]) {
                swap(arr[j][1], arr[j+1][1]);
                swap(arr[j][0], arr[j+1][0]);
            }
        }
    }
}

void traverse (int** arr, int n) {
    for (int i=0; i<n; i++)
        cout << arr[i][0] << " " << arr[i][1] << endl;
}

void solution (int** processes, int n) {
    int turnAroundTime = 0;

    for (int i=0; i<n; i++) {
        turnAroundTime += processes[i][1];
        cout << "Turn around time for process " << processes[i][0] << " is " << turnAroundTime << " seconds\n";
        cout << "Waiting time for process " << processes[i][0] << " is " << turnAroundTime-processes[i][1] << " seconds\n";
    }
}


int main () {
    int n;
    cout << "Enter no of processes" << endl;
    cin >> n;
    int** processes = (int**)malloc(n*sizeof(int*));
    for (int i=0; i<n; i++) {
        *(processes+i) = (int*)malloc(2*sizeof(int));
    }

    for (int i = 0; i<n; i++) {
        processes[i][0] = i+1;
        cout << "Enter Burst Time for process " << i+1 << endl;
        cin >> processes[i][1];
    }

    traverse(processes, n);
    sort_burst_time(processes, n);

    solution(processes, n);
    
}

// round robin

#include "bits/stdc++.h"
using namespace std;

int main () {
    int n;
    cout << "Enter no of processes" << endl;
    cin >> n;
    int burst_time[n];
    int remaining_time[n];
    cout << "Enter burst time of processes" << endl;
    for (int i=0; i<n; i++) {
        cin >> burst_time[i];
        remaining_time[i] = burst_time[i];
    }

    int time_quantum;
    cout << "Enter time quantum:" << endl;
    cin >> time_quantum;

    int waiting_time[n] = {0};
    int t=0;
    while (true) {
        bool completed = true;
        for (int i=0; i<n; i++) {
            if (remaining_time[i] != 0) {
                completed = false;
                if (remaining_time[i] > time_quantum) {
                    t += time_quantum;
                    remaining_time[i] -= time_quantum;
                } else {
                    t += remaining_time[i];
                    remaining_time[i] = 0;
                    waiting_time[i] = t-burst_time[i];
                }
            }
        }
        if (completed)
            break;
    }

    int turnaround_time[n];
    for (int i=0; i<n; i++)
        turnaround_time[i] = burst_time[i] + waiting_time[i];

    cout << "Process id    burst time   turnaround time    waiting time" << endl;
    for (int i=0; i<n; i++) {
        cout << i+1 << "\t\t" << burst_time[i] << "\t\t" << turnaround_time[i] << "\t\t" << waiting_time[i] << endl;
    }

    return 0;    
}


// priority scheduling

#include "bits/stdc++.h"
using namespace std;

void sort_priority (int** arr, int n) {
    for (int i=0; i<n-1; i++) {
        for (int j=0; j<n-i-1; j++) {
            if (arr[j][2] > arr[j+1][2]) {
                swap(arr[j][2], arr[j+1][2]);
                swap(arr[j][1], arr[j+1][1]);
                swap(arr[j][0], arr[j+1][0]);
            }
        }
    }
}

void traverse (int** arr, int n) {
    for (int i=0; i<n; i++)
        cout << arr[i][0] << " " << arr[i][1] << " " << arr[i][2] << endl;
}

void solution (int** processes, int n) {
    int turnAroundTime = 0;

    for (int i=0; i<n; i++) {
        turnAroundTime += processes[i][1];
        cout << "Turn around time for process " << processes[i][0] << " is " << turnAroundTime << " seconds\n";
        cout << "Waiting time for process " << processes[i][0] << " is " << turnAroundTime-processes[i][1] << " seconds\n";
    }
}


int main () {
    int n;
    cout << "Enter no of processes:" << endl;
    cin >> n;
    int** processes = (int**)malloc(n*sizeof(int*));
    for (int i=0; i<n; i++) {
        *(processes+i) = (int*)malloc(3*sizeof(int));
    }

    for (int i = 0; i<n; i++) {
        processes[i][0] = i+1;
        cout << "Enter Burst Time for process " << i+1 << endl;
        cin >> processes[i][1];
        cout << "Enter priority for process " << i+1 << endl; 
        cin >> processes[i][2];
    }

    traverse(processes, n);
    sort_priority(processes, n);

    solution(processes, n);
    
}